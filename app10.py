
import streamlit as st
import datetime
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib import colors
from reportlab.lib.pagesizes import A4
from reportlab.lib.units import cm
import io

st.set_page_config(page_title="Avalia√ß√£o ATM's - DOF", layout="wide")

st.title("üß† Avalia√ß√£o ATM's - DOF [Dor Orofacial]")

# ======================================================
# üìã Dados do paciente
# ======================================================
st.header("üìã Dados do Paciente")
nome = st.text_input("Nome completo")
qp = st.text_area("Queixa Principal (Q.P.)")
tempo = st.text_input("Tempo de dor")
tipo_dor = st.radio("Tipo de dor", ["Aguda", "Cr√¥nica","Leve", "Moderada", "Severa"])
comorbidades = st.multiselect("Condi√ß√µes de sa√∫de", ["Diabetes", "HAS", "C√¢ncer", "Tumor", "Marca-passo", "Outros", "Nenhuma"])
cirurgias = st.text_area("Cirurgias realizadas")
tratamentos_previos = st.text_area("Tratamentos j√° realizados")

# ======================================================
# ü§ï Dor de cabe√ßa - Migr√¢nea
# ======================================================
st.header("ü§ï Dor de Cabe√ßa - Migr√¢nea")
migranea = st.checkbox("Marque para avaliar sintomas de Migr√¢nea")
sintomas_migranea = []
if migranea:
    sintomas_migranea = st.multiselect("Sintomas", [
        "Migr√¢nea (Enxaqueca)","Unilateral", "Pulsada", "Sensibilidade ao cheiro", "Sensibilidade auditiva",
        "Aura presente", "Sensibilidade √† claridade", "N√°useas", "V√¥mitos",
        "Precisa se trancar no quarto escuro"
    ])

# ======================================================
# ü§ï Dor de cabe√ßa - Tensional
# ======================================================
st.header("ü§ï Dor de Cabe√ßa - Tensional")
tensional = st.checkbox("Marque para avaliar sintomas de Cefaleia Tensional")
sintomas_tensional = []
if tensional:
    sintomas_tensional = st.multiselect("Sintomas e m√∫sculos envolvidos", [
        "Tipo Tensional","MM trap√©zio", "MM temporal", "MM ECOM", "MM escalenos", "Dor leve/moderada",
        "Melhora com exerc√≠cio", "N√£o se agrava com esfor√ßo f√≠sico", "Dor bilateral n√£o puls√°til", "Outros MM"
    ])

# ======================================================
# ü¶∑ Bloco √önico - Dor, Zumbido, H√°bitos, Respira√ß√£o, Postura, Movimento
# ======================================================
st.header("ü¶∑ Dor, Zumbido e H√°bitos Parafuncionais")
sintomas_dor = st.multiselect("Sintomas", ["ATM D", "ATM E", "Falar", "Mastigar", "Ouvido", "Bruxismo", "Briquismo"])
mastigacao = st.multiselect("Mastiga√ß√£o", ["D", "E"])
habitos = st.multiselect("H√°bitos Parafuncionais", [
    "Apertar os dentes", "Roer unhas", "Apoiar m√£o ao dormir", "Uso de celular do lado sintom√°tico",
    "Apoio m√£o no queixo", "Morder l√°bio", "Morder bochecha", "Mascar chiclete",
    "Apertamento durante atividade f√≠sica", "Apertamento durante atividade profissional"
])
zumbido = st.radio("Zumbido", ["Sim", "N√£o"])
tensao_muscular = st.checkbox("Zumbido relacionado √† tens√£o muscular (Masseter + Temporal)")

# üå¨Ô∏è Padr√£o respirat√≥rio
st.header("üå¨Ô∏è Padr√£o Respirat√≥rio")
respiracao = st.radio("Respira√ß√£o", ["Pela boca", "Pelo nariz"])
if respiracao == "Pela boca":
    st.warning("‚ö†Ô∏è Respira√ß√£o bucal pode levar √† hiperativa√ß√£o dos m√∫sculos ECOM e Escalenos.")

# üßç Postura e movimento funcional
st.header("üßç Postura e Movimento Funcional")
postura = st.multiselect("Altera√ß√µes posturais", ["Anterioriza√ß√£o da cabe√ßa", "Hipercifose tor√°cica"])
movimentos_cervicais = st.multiselect("Movimentos que exacerbam a dor", [
    "Flex√£o", "Extens√£o", "Inclina√ß√£o D", "Inclina√ß√£o E", "Rota√ß√£o D", "Rota√ß√£o E"
])
with st.expander("Ver M√∫sculos Envolvidos"):
    st.write("ECOM, Escalenos, Pterigoideo lateral, Hi√≥ides supra e infra, dig√°stricos e Platisma.")

# üìè Amplitude de movimento
st.header("üìè Amplitude de Movimento")
abertura = st.radio("Abertura bucal", ["Hipomobilidade", "Hipermobilidade", "Normobilidade"])
lateral_d = st.slider("Lateraliza√ß√£o Direita (cm)", 0.0, 3.0, 1.0)
lateral_e = st.slider("Lateraliza√ß√£o Esquerda (cm)", 0.0, 3.0, 1.0)
lateralidade = st.radio("Classifica√ß√£o da lateraliza√ß√£o", ["Hipomobilidade", "Normobilidade", "Hipermobilidade"])

amplitude = {}
for movimento in ["Flex√£o", "Extens√£o", "Inclina√ß√£o D", "Inclina√ß√£o E", "Rota√ß√£o D", "Rota√ß√£o E"]:
    valor = st.slider(f"{movimento} cervical (graus)", 0, 90, 45)
    amplitude[movimento] = valor

# ======================================================
# üìÑ QUADRO RESUMO (RIGOROSAMENTE AJUSTADO)
# ======================================================
st.header("üìã Resumo da Avalia√ß√£o")
st.subheader("Observa√ß√µes e Sintomas Coletados")

# Mapeia os tratamentos para cada sintoma/diagn√≥stico
tratamentos_map = {
    "Sintomas de Migr√¢nea": [
        "H√°bitos alimentares", "Evitar sa√≠da de sua rotina di√°ria", "Sono reparador", 
        "Respira√ß√£o", "Repouso", "Tratamento medicamentoso [crise]"
    ],
    "Sintomas de Cefaleia Tensional": [
        "Libera√ß√£o miofascial", "Digitopress√£o (Trigger points)", "Pompage", 
        "Atividade f√≠sica", "Alongamentos"
    ],
    "Sintomas de Dor ATM": [
        "Libera√ß√£o miofascial", "Digitopress√£o (Trigger Points)",
        "Alongamento muscular", "Orienta√ß√£o para evitar h√°bitos parafuncionais",
        "Mobiliza√ß√£o articular ATM (Maitland)"
    ],
    "H√°bitos Parafuncionais": [
        "Orienta√ß√£o para evitar h√°bitos parafuncionais"
    ],
    "Respira√ß√£o": [
        "Exerc√≠cios respirat√≥rios + Encaminhamento Fonoaudiologia/Otorrino"
    ],
    "Postura": [
        "Exerc√≠cios posturais e mobiliza√ß√£o articular (RPG, Pilates, Fisioterapia postural)"
    ],
    "Abertura Bucal": [
        "Mobiliza√ß√£o articular ATM (Maitland)"
    ],
    "Classifica√ß√£o da Lateraliza√ß√£o": [
        "Mobiliza√ß√£o articular ATM (Maitland)"
    ],
    "Zumbido": [
        "Encaminhamento Otorrinolaringologia"
    ]
}

# Constr√≥i a tabela com 3 colunas, incluindo o tratamento mapeado
resumo_data = [["Diagn√≥stico", "Sintomas", "Tratamento Sugerido"]]

resumo_data.append(["Sintomas de Migr√¢nea", ", ".join(sintomas_migranea) if migranea else "N√£o avaliado", ", ".join(tratamentos_map["Sintomas de Migr√¢nea"]) if migranea else ""])
resumo_data.append(["Sintomas de Cefaleia Tensional", ", ".join(sintomas_tensional) if tensional else "N√£o avaliado", ", ".join(tratamentos_map["Sintomas de Cefaleia Tensional"]) if tensional else ""])
resumo_data.append(["Sintomas de Dor ATM", ", ".join(sintomas_dor) if sintomas_dor else "Nenhum", ", ".join(tratamentos_map["Sintomas de Dor ATM"]) if sintomas_dor else ""])
resumo_data.append(["H√°bitos Parafuncionais", ", ".join(habitos) if habitos else "Nenhum", ", ".join(tratamentos_map["H√°bitos Parafuncionais"]) if habitos else ""])
resumo_data.append(["Respira√ß√£o", respiracao, ", ".join(tratamentos_map["Respira√ß√£o"]) if respiracao == "Pela boca" else ""])
resumo_data.append(["Postura", ", ".join(postura) if postura else "Nenhuma", ", ".join(tratamentos_map["Postura"]) if postura else ""])
resumo_data.append(["Movimentos que exacerbam a dor", ", ".join(movimentos_cervicais) if movimentos_cervicais else "Nenhum", "Nenhum tratamento direto."])
resumo_data.append(["Abertura Bucal", abertura, ", ".join(tratamentos_map["Abertura Bucal"]) if abertura != "Normobilidade" else ""])
resumo_data.append(["Classifica√ß√£o da Lateraliza√ß√£o", lateralidade, ", ".join(tratamentos_map["Classifica√ß√£o da Lateraliza√ß√£o"]) if lateralidade != "Normobilidade" else ""])
resumo_data.append(["Zumbido", zumbido, ", ".join(tratamentos_map["Zumbido"]) if zumbido == "Sim" and not tensao_muscular else ""])
resumo_data.append(["Zumbido com tens√£o muscular", "Sim" if tensao_muscular else "N√£o", ", ".join(tratamentos_map["Sintomas de Dor ATM"]) if tensao_muscular else ""])


st.table(resumo_data)

# ======================================================
# ü©∫ Diagn√≥stico e Tratamento (Preenchido automaticamente)
# ======================================================
st.header("ü©∫ Diagn√≥stico e Tratamento")
diagnostico = []
tratamento = []

# Grupo Migr√¢nea
if migranea:
    diagnostico.append("Migr√¢nea")
    tratamento += [
        "H√°bitos alimentares","Evitar sa√≠da de sua rotina di√°ria", "Sono reparador", "Respira√ß√£o",
        "Repouso", "Tratamento medicamentoso [crise]"
    ]

# Grupo Cefaleia Tensional
if tensional:
    diagnostico.append("Cefaleia Tensional")
    tratamento += [
        "Libera√ß√£o miofascial", "Digitopress√£o (Trigger points)", "Pompage", "Atividade f√≠sica", "Alongamentos"
    ]

# Grupo 1 - Dor, ATM, h√°bitos, zumbido muscular
if sintomas_dor or habitos or (zumbido == "Sim" and tensao_muscular):
    diagnostico.append("Disfun√ß√£o Temporomandibular de origem muscular/articular")
    tratamento += [
        "Libera√ß√£o miofascial", "Digitopress√£o (Trigger Points)",
        "Alongamento muscular", "Orienta√ß√£o para evitar h√°bitos parafuncionais",
        "Mobiliza√ß√£o articular ATM (Maitland)"
    ]

# Grupo 2 - Respira√ß√£o/Postura/Zumbido n√£o muscular
if respiracao == "Pela boca":
    diagnostico.append("Altera√ß√£o do padr√£o respirat√≥rio (respira√ß√£o bucal)")
    tratamento.append("Exerc√≠cios respirat√≥rios + Encaminhamento Fonoaudiologia/Otorrino")

if postura:
    diagnostico.append("Altera√ß√£o postural cervical/tor√°cica")
    tratamento.append("Exerc√≠cios posturais e mobiliza√ß√£o articular (RPG, Pilates, Fisioterapia postural)")

if zumbido == "Sim" and not tensao_muscular:
    diagnostico.append("Zumbido n√£o relacionado a tens√£o muscular")
    tratamento.append("Encaminhamento Otorrinolaringologia")

# Grupo 3 - Amplitude de movimento
if abertura != "Normobilidade" or lateralidade != "Normobilidade":
    if "Disfun√ß√£o Temporomandibular de origem articular" not in diagnostico:
        diagnostico.append("Disfun√ß√£o Temporomandibular de origem articular")
    if "Mobiliza√ß√£o articular ATM (Maitland)" not in tratamento:
        tratamento.append("Mobiliza√ß√£o articular ATM (Maitland)")

# ======================================================
# üìã NOVO RESUMO DE DIAGN√ìSTICO E TRATAMENTO
# ======================================================
st.subheader("Resumo do Diagn√≥stico e Tratamento Gerados")
# Exibe o diagn√≥stico gerado
if diagnostico:
    st.markdown("**Diagn√≥stico(s):** " + ", ".join(diagnostico))
else:
    st.markdown("**Diagn√≥stico(s):** Sem altera√ß√µes significativas.")

# Exibe o tratamento gerado
if tratamento:
    st.markdown("**Tratamento(s) Recomendado(s):** " + ", ".join(set(tratamento)))
else:
    st.markdown("**Tratamento(s) Recomendado(s):** Sem necessidade de interven√ß√£o espec√≠fica no momento.")

# ======================================================
# üìÖ Plano terap√™utico semanal
# ======================================================
st.header("üìÖ Plano Terap√™utico Semanal")
dias = ["Segunda", "Ter√ßa", "Quarta", "Quinta", "Sexta"]
plano = {}
for dia in dias:
    plano[dia] = st.multiselect(f"T√©cnicas para {dia}", list(set(tratamento)), key=dia)

# ======================================================
# üìÑ Relat√≥rio final
# ======================================================
st.header("üìÑ Relat√≥rio Final")
if st.button("Gerar Relat√≥rio"):
    st.subheader("üßæ Dados do Paciente")
    st.write(f"**Nome:** {nome}")
    st.write(f"**Q.P.:** {qp}")
    st.write(f"**Tempo:** {tempo}")
    st.write(f"**Tipo de dor:** {tipo_dor}")
    st.write(f"**Comorbidades:** {', '.join(comorbidades)}")
    st.write(f"**Cirurgias:** {cirurgias}")
    st.write(f"**Tratamentos pr√©vios:** {tratamentos_previos}")

    st.subheader("ü©∫ Diagn√≥stico")
    st.write(", ".join(diagnostico))

    st.subheader("üíä Tratamentos Recomendados")
    st.write(", ".join(set(tratamento)))

    st.subheader("üìÖ Plano Semanal")
    for dia, tecnicas in plano.items():
        st.write(f"**{dia}:** {', '.join(tecnicas)}")

    # ======================
    # üìù Resumo interpretativo autom√°tico
    # ======================
    resumo = "O paciente apresenta quadro cl√≠nico compat√≠vel com "
    if len(diagnostico) == 1:
        resumo += f"**{diagnostico[0]}**."
    elif len(diagnostico) > 1:
        resumo += "**" + " + ".join(diagnostico) + "**."
    else:
        resumo += "**sem altera√ß√µes significativas detectadas**."

    resumo += " O tratamento recomendado envolve: "
    if tratamento:
        resumo += ", ".join(set(tratamento)) + "."
    else:
        resumo += "sem necessidade de interven√ß√£o espec√≠fica no momento."

    st.subheader("üìù Resumo Cl√≠nico")
    st.info(resumo)

    st.success("‚úÖ Relat√≥rio gerado com sucesso!")

# ======================================================
# üìÑ Exportar Relat√≥rio em PDF
# ======================================================
if st.button("Exportar PDF"):
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4,
                            rightMargin=2*cm, leftMargin=2*cm,
                            topMargin=2*cm, bottomMargin=2*cm)

    styles = getSampleStyleSheet()
    styles.add(ParagraphStyle(name="Titulo", fontSize=16, leading=20, textColor=colors.HexColor("#003366"), spaceAfter=12, alignment=1, bold=True))
    styles.add(ParagraphStyle(name="Subtitulo", fontSize=13, leading=16, textColor=colors.HexColor("#006699"), spaceBefore=12, spaceAfter=6, bold=True))
    styles.add(ParagraphStyle(name="TextoPadrao", fontSize=11, leading=14))
    styles.add(ParagraphStyle(name="Resumo", fontSize=12, leading=16, textColor=colors.black, backColor=colors.HexColor("#f2f2f2"), spaceBefore=10, spaceAfter=10, leftIndent=6, rightIndent=6))

    elementos = []

    # T√≠tulo
    elementos.append(Paragraph("üß† Avalia√ß√£o ATM's - DOF [Dor Orofacial]", styles["Titulo"]))
    elementos.append(Spacer(1, 12))

    # Dados do paciente em tabela
    dados_paciente = [
        ["Nome", nome],
        ["Queixa Principal (Q.P.)", qp],
        ["Tempo de Dor", tempo],
        ["Tipo de Dor", tipo_dor],
        ["Comorbidades", ", ".join(comorbidades)],
        ["Cirurgias", cirurgias],
        ["Tratamentos Pr√©vios", tratamentos_previos]
    ]
    tabela_paciente = Table(dados_paciente, colWidths=[5*cm, 10*cm])
    tabela_paciente.setStyle(TableStyle([
        ("BACKGROUND", (0,0), (-1,0), colors.HexColor("#d9e6f2")),
        ("TEXTCOLOR", (0,0), (-1,0), colors.black),
        ("ALIGN", (0,0), (-1,-1), "LEFT"),
        ("FONTNAME", (0,0), (-1,-1), "Helvetica"),
        ("FONTSIZE", (0,0), (-1,-1), 10),
        ("GRID", (0,0), (-1,-1), 0.25, colors.grey),
        ("VALIGN", (0,0), (-1,-1), "TOP")
    ]))
    elementos.append(Paragraph("üìã Dados do Paciente", styles["Subtitulo"]))
    elementos.append(tabela_paciente)
    elementos.append(Spacer(1, 12))

    # Adiciona o resumo da avalia√ß√£o no PDF
    resumo_data_pdf = [["Diagn√≥stico", "Sintomas", "Tratamento Sugerido"]]
    resumo_data_pdf.append([
        Paragraph("Sintomas de Migr√¢nea", styles["TextoPadrao"]),
        Paragraph(", ".join(sintomas_migranea) if migranea else "N√£o avaliado", styles["TextoPadrao"]),
        Paragraph(", ".join(tratamentos_map["Sintomas de Migr√¢nea"]) if migranea else "", styles["TextoPadrao"])
    ])
    resumo_data_pdf.append([
        Paragraph("Sintomas de Cefaleia Tensional", styles["TextoPadrao"]),
        Paragraph(", ".join(sintomas_tensional) if tensional else "N√£o avaliado", styles["TextoPadrao"]),
        Paragraph(", ".join(tratamentos_map["Sintomas de Cefaleia Tensional"]) if tensional else "", styles["TextoPadrao"])
    ])
    resumo_data_pdf.append([
        Paragraph("Sintomas de Dor ATM", styles["TextoPadrao"]),
        Paragraph(", ".join(sintomas_dor) if sintomas_dor else "Nenhum", styles["TextoPadrao"]),
        Paragraph(", ".join(tratamentos_map["Sintomas de Dor ATM"]) if sintomas_dor else "", styles["TextoPadrao"])
    ])
    resumo_data_pdf.append([
        Paragraph("H√°bitos Parafuncionais", styles["TextoPadrao"]),
        Paragraph(", ".join(habitos) if habitos else "Nenhum", styles["TextoPadrao"]),
        Paragraph(", ".join(tratamentos_map["H√°bitos Parafuncionais"]) if habitos else "", styles["TextoPadrao"])
    ])
    resumo_data_pdf.append([
        Paragraph("Respira√ß√£o", styles["TextoPadrao"]),
        Paragraph(respiracao, styles["TextoPadrao"]),
        Paragraph(", ".join(tratamentos_map["Respira√ß√£o"]) if respiracao == "Pela boca" else "", styles["TextoPadrao"])
    ])
    resumo_data_pdf.append([
        Paragraph("Postura", styles["TextoPadrao"]),
        Paragraph(", ".join(postura) if postura else "Nenhuma", styles["TextoPadrao"]),
        Paragraph(", ".join(tratamentos_map["Postura"]) if postura else "", styles["TextoPadrao"])
    ])
    resumo_data_pdf.append([
        Paragraph("Movimentos que exacerbam a dor", styles["TextoPadrao"]),
        Paragraph(", ".join(movimentos_cervicais) if movimentos_cervicais else "Nenhum", styles["TextoPadrao"]),
        Paragraph("Nenhum tratamento direto.", styles["TextoPadrao"])
    ])
    resumo_data_pdf.append([
        Paragraph("Abertura Bucal", styles["TextoPadrao"]),
        Paragraph(abertura, styles["TextoPadrao"]),
        Paragraph(", ".join(tratamentos_map["Abertura Bucal"]) if abertura != "Normobilidade" else "", styles["TextoPadrao"])
    ])
    resumo_data_pdf.append([
        Paragraph("Classifica√ß√£o da Lateraliza√ß√£o", styles["TextoPadrao"]),
        Paragraph(lateralidade, styles["TextoPadrao"]),
        Paragraph(", ".join(tratamentos_map["Classifica√ß√£o da Lateraliza√ß√£o"]) if lateralidade != "Normobilidade" else "", styles["TextoPadrao"])
    ])
    resumo_data_pdf.append([
        Paragraph("Zumbido", styles["TextoPadrao"]),
        Paragraph(zumbido, styles["TextoPadrao"]),
        Paragraph(", ".join(tratamentos_map["Zumbido"]) if zumbido == "Sim" and not tensao_muscular else "", styles["TextoPadrao"])
    ])
    resumo_data_pdf.append([
        Paragraph("Zumbido com tens√£o muscular", styles["TextoPadrao"]),
        Paragraph("Sim" if tensao_muscular else "N√£o", styles["TextoPadrao"]),
        Paragraph(", ".join(tratamentos_map["Sintomas de Dor ATM"]) if tensao_muscular else "", styles["TextoPadrao"])
    ])

    tabela_resumo_sintomas = Table(resumo_data_pdf, colWidths=[5*cm, 5*cm, 5*cm])
    tabela_resumo_sintomas.setStyle(TableStyle([
        ("BACKGROUND", (0,0), (-1,0), colors.HexColor("#d9e6f2")),
        ("GRID", (0,0), (-1,-1), 0.25, colors.grey),
        ("VALIGN", (0,0), (-1,-1), "TOP")
    ]))
    elementos.append(Paragraph("üìã Resumo da Avalia√ß√£o", styles["Subtitulo"]))
    elementos.append(tabela_resumo_sintomas)
    elementos.append(Spacer(1, 12))

    # Adiciona o diagn√≥stico e tratamento gerados no PDF
    elementos.append(Paragraph("ü©∫ Diagn√≥stico e Tratamento", styles["Subtitulo"]))
    elementos.append(Paragraph("<b>Diagn√≥stico(s):</b> " + ", ".join(diagnostico), styles["TextoPadrao"]))
    elementos.append(Paragraph("<b>Tratamento(s) Recomendado(s):</b> " + ", ".join(set(tratamento)), styles["TextoPadrao"]))
    elementos.append(Spacer(1, 12))
    
    # Plano semanal em tabela
    elementos.append(Paragraph("üìÖ Plano Terap√™utico Semanal", styles["Subtitulo"]))
    plano_dados = [[Paragraph(dia, styles["TextoPadrao"]), Paragraph(", ".join(tecnicas), styles["TextoPadrao"])] for dia, tecnicas in plano.items()]
    plano_dados.insert(0, ["**Dia**", "**T√©cnicas**"])

    tabela_plano = Table(plano_dados, colWidths=[4*cm, 11*cm])
    tabela_plano.setStyle(TableStyle([
        ("BACKGROUND", (0,0), (-1,0), colors.HexColor("#d9e6f2")),
        ("GRID", (0,0), (-1,-1), 0.25, colors.grey),
        ("VALIGN", (0,0), (-1,-1), "TOP")
    ]))
    elementos.append(tabela_plano)

    # === CORRE√á√ÉO AQUI: Novo formato para o resumo da Regra de Ouro ===
    elementos.append(Paragraph("‚≠ê Regra de Ouro", styles["Subtitulo"]))
    
    # Par√°grafo de introdu√ß√£o
    elementos.append(Paragraph(f"O paciente <b>{nome}</b> apresenta quadro cl√≠nico compat√≠vel com:", styles["TextoPadrao"]))

    # Lista de diagn√≥sticos
    diagnosticos_list = [f"<li>{d}</li>" for d in diagnostico]
    diagnosticos_html = f"<ul>{''.join(diagnosticos_list)}</ul>"
    elementos.append(Paragraph(f"<b>Diagn√≥sticos:</b> {diagnosticos_html}", styles["TextoPadrao"]))

    # Lista de tratamentos
    tratamentos_list = [f"<li>{t}</li>" for t in sorted(list(set(tratamento)))]
    tratamentos_html = f"<ul>{''.join(tratamentos_list)}</ul>"
    elementos.append(Paragraph(f"<b>Tratamentos:</b> {tratamentos_html}", styles["TextoPadrao"]))

    # Par√°grafo final
    elementos.append(Paragraph("O plano terap√™utico semanal foi estruturado conforme a tabela acima.", styles["TextoPadrao"]))

    doc.build(elementos)
    buffer.seek(0)

    st.download_button(
        label="üì• Baixar Relat√≥rio em PDF",
        data=buffer,
        file_name=f"Relatorio_{nome}.pdf",
        mime="application/pdf"
    )